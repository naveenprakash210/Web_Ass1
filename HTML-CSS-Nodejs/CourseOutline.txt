Course Title: “Fundamentals of Web Development (HTML, CSS, JS, Advanced JS) and Introduction to Node JS”

    1. Course Summary:
    a) The focus of the course is web apps, it takes the participants from being a programmer to a developer. The journey is about being able to think of an idea and converting it into a web application
    b) It will enable the participants to work on the front end as well as the backend technology

    2. Learning Outcomes:
At the completion of the Course participants will exhibit competencies / Skills of:

    a) Students will learn the skills necessary to become a Back-End Engineer, Front-End Engineer, or a Full-Stack Engineer.
    b) After completing the courses, students will be able to design web pages for both static and dynamic websites with the latest technologies.

    3. Course Content:
    Day: 1 HTML5 and CSS

    A. HTML 5
        a. Introduction to HTML
        b. Formatting Tags, Table, List
        c. Forms
        d. Introduction to HTML5
        e. Tags and attributes in HTML5
        f. Drag & Drop, video, audio, svg
        g. Geolocations
        h. Web Storage
        
    B. CSS
    a. Introduction to CSS,
    b. Internal, External, Inline Stylesheet 
    c. Using class and ID
    d. CSS3 Flexbox and Grid
    e. Box model


    C. SCSS
    a. Introduction to SCSS
    b. Installation
    c. Variables, Functions
    d. Nseting
    e. Mixins, import, extendd
    f. Mini Project – Portfolio Web Page
Day: 2 Javascript, JSON
    E. Introduction to JavaScript
    a. Introduction to JavaScript
    b. Syntax and structure
    c. Data types, Variables, 
    d. Operators, 
    e. Control flow statements
    f. Different types of dialog box (alert, confirm, prompt)
    g. Using Functions
    h. Arrays
    i. Introduction to Event Handling
    j. Using Inner HTML with DOM in div tags for event Handling
    k. DOM operation
    l. Objects
    m. Prototypes, Closures
    n. Form Validation
    o. AJAX with vanilla javascript

    F. JSON

    a. Introduction to JavaScript Object Notation (JSON)
    b. JSON Datatypes
    c. Using parse() and Stringify() method

    G. Bootstrap

    a. Introduction to Bootstrap
    b. Using navbar, buttons, form, thumbnails

Day: 3 Es6 and Typescript

    H. Introduction to ES6
    a. Introduction to ES6
    b. var, let, const
    c. Template literals
    d. Default parameters
    e. Rest Parameters
    f. Spread operator
    g. Destructuring
    h. for… of loop
    i. Lambda expressions / Arrow functions
    j. Modules
    k. Iterators and generators
    l. Yield keyword
    m. Set and Map

    I. Introduction to Typescript
            a. Introduction to typescript
            b. JavaScript & Typescript 
    J. Types
        a. Primitive types
        b. Type inference
        c. Enums, Tuples
        d. Union types and intersection types
        e. Nullable types
        f. Never and void types
    K. Classes
        a. Classes, Class properties, Static Properties
        b. Constructors, getters & setters
        c. Inheritance, Abstract classes, Interfaces
        d. Access modifiers
    L. Namespaces and Modules
        a. Namespaces and multiple file
        b. Creating modules
        c. Loading modules
    M. Generics
        a. Generic classes
        b. Functions, types and arrays
        c. Constraints
    N. Decorators
        a. Class and Method decorators
        b. Property and Parameter decorators
    O. Creating a typescript project
        a. tsc and tsconfig file
        b. Debugging typescript

Day: 4 Node JS with Express

    P. Introduction to Javascript frameworks
            a. What is a framework?
            b. Difference between a framework and library
            c. Client-side frameworks – Angular, React, Vue
            d. Server-side frameworks – Node JS
            e. Difference between Angular Vue React Node
    Q. Introduction to Node JS
            a. Download and install node
            b. Create a simple node application
            c. The NodeJS Terminal
            d. NodeJS package manager NPM
    R. Node Modules
            a. What is a module
            b. Require and module exports
            c. Using core modules
    S. HTTP and HTTPs
            a. Making a simple server
            b. When to use HTTP and HTTPs
            c. Server ports and listening
            d. HTTP requests and responses
            e. Request and response headers and body
            f. Creating a response to incoming requests
            g. Building a simple HTTP server with static files
    T. Express Framework
            a. What is the express framework?
            b. How it differs to using HTTP and other core modules
            c. Creating an express application
            d. Making an HTTP internal server
            e. Attaching express to an external server
            f. The role of semantic requests
            g. USE, GET, POST, PUT, DELETE, etc.
    U. RESTful APIs
            a. What does RESTful mean?
            b. Manipulating data via a route
            c. Typical semantic requests for routing an API
            d. Persisting data through JSON
            e. The role of database technology
    V. Deployment and Testing
            a. Deploy node app into Heroku
            b. Test the REST API using POSTMAN app

